From 326108c4e68f0ebb79731a94c8a09402ddf5eee4 Mon Sep 17 00:00:00 2001
From: Kam Nasim <kam.nasim@windriver.com>
Date: Fri, 30 Oct 2015 01:40:37 -0400
Subject: [PATCH 01/14] Rebase. Pike. Feature Set: Keyring

Squashes the following commits:

- Add Keyring support (Kilo Rebase) (Author: Al Bailey)
---------------------------------------------------------------------------------
- /opt/platform/.keyring/python_keyring/crypted_pass.cfg file gets
corrupted when adding user(s) (Author: Aly Nathoo)
---------------------------------------------------------------------------------
- Additionally, certain local Keystone users such as (admin, bmc) are
stored in Keyring instead of the unencrypted SQL Identity backend.
(Author: Kam Nasim)
---------------------------------------------------------------------------------
- Ensuring that the 'admin' password is updated in keyring as
  well as SQL backend for 'openstack user password set' as well as From
Horizon, Settings -> Change Password
(Author: Shoaib Nasir)
---------------------------------------------------------------------------------
- Changes to keystone identity core and tox test cases for the
  Pike rebase (Author: Kam Nasim)
---
 keystone/exception.py           |  6 +++++
 keystone/identity/core.py       | 53 +++++++++++++++++++++++++++++++++++++++++
 keystone/tests/unit/test_cli.py | 19 ++++++++++-----
 requirements.txt                |  1 +
 4 files changed, 73 insertions(+), 6 deletions(-)

diff --git a/keystone/exception.py b/keystone/exception.py
index d5269bf..b9731df 100644
--- a/keystone/exception.py
+++ b/keystone/exception.py
@@ -201,6 +201,12 @@ class RegionDeletionError(ForbiddenNotSecurity):
                        "its child regions have associated endpoints.")
 
 
+class WRSForbiddenAction(Error):
+    message_format = _("That action is not permitted")
+    code = 403
+    title = 'Forbidden'
+
+
 class SecurityError(Error):
     """Security error exception.
 
diff --git a/keystone/identity/core.py b/keystone/identity/core.py
index b53d269..4096992 100644
--- a/keystone/identity/core.py
+++ b/keystone/identity/core.py
@@ -16,6 +16,7 @@
 
 import functools
 import itertools
+import keyring
 import operator
 import os
 import threading
@@ -52,6 +53,7 @@ MEMOIZE_ID_MAPPING = cache.get_memoization_decorator(group='identity',
 
 DOMAIN_CONF_FHEAD = 'keystone.'
 DOMAIN_CONF_FTAIL = '.conf'
+KEYRING_CGCS_SERVICE = "CGCS"
 
 # The number of times we will attempt to register a domain to use the SQL
 # driver, if we find that another process is in the middle of registering or
@@ -1066,6 +1068,29 @@ class Manager(manager.Manager):
             if new_ref['domain_id'] != orig_ref['domain_id']:
                 raise exception.ValidationError(_('Cannot change Domain ID'))
 
+    def _update_keyring_password(self, user, new_password):
+        """Update user password in Keyring backend.
+
+        This method Looks up user entries in Keyring backend
+        and accordingly update the corresponding user password.
+
+        :param user         : keyring user struct
+        :param new_password : new password to set
+        """
+        if (new_password is not None) and ('name' in user):
+            try:
+                # only update if an entry exists
+                if (keyring.get_password(KEYRING_CGCS_SERVICE, user['name'])):
+                    keyring.set_password(KEYRING_CGCS_SERVICE,
+                                         user['name'], new_password)
+
+            except (keyring.errors.PasswordSetError, RuntimeError):
+                msg = ('Failed to Update Keyring Password for the user %s')
+                LOG.warning(msg, user['name'])
+                # only raise an exception if this is the admin user
+                if (user['name'] == 'admin'):
+                    raise exception.WRSForbiddenAction(msg % user['name'])
+
     @domains_configured
     @exception_translated('user')
     def update_user(self, user_id, user_ref, initiator=None):
@@ -1105,6 +1130,14 @@ class Manager(manager.Manager):
         if enabled_change or user.get('password') is not None:
             self.emit_invalidate_user_token_persistence(user_id)
 
+        # Certain local Keystone users are stored in Keystone as opposed
+        # to the default SQL Identity backend, such as the admin user.
+        # When its password is updated, we need to update Keyring as well
+        # as certain services retrieve this user context from Keyring and
+        # will get auth failures
+        if ('password' in user) and ('name' in ref):
+            self._update_keyring_password(ref, user['password'])
+
         return self._set_domain_id_and_mapping(
             ref, domain_id, driver, mapping.EntityType.USER)
 
@@ -1115,6 +1148,7 @@ class Manager(manager.Manager):
             self._get_domain_driver_and_entity_id(user_id))
         # Get user details to invalidate the cache.
         user_old = self.get_user(user_id)
+        username = user_old.get('name', "")
         driver.delete_user(entity_id)
         self.assignment_api.delete_user_assignments(user_id)
         self.get_user.invalidate(self, user_id)
@@ -1122,6 +1156,17 @@ class Manager(manager.Manager):
                                          user_old['domain_id'])
         self.credential_api.delete_credentials_for_user(user_id)
         self.id_mapping_api.delete_id_mapping(user_id)
+        # Delete the keyring entry associated with this user (if present)
+        try:
+            keyring.delete_password(KEYRING_CGCS_SERVICE, username)
+        except keyring.errors.PasswordDeleteError:
+            LOG.warning(('delete_user: PasswordDeleteError for %s'),
+                        username)
+            pass
+        except exception.UserNotFound:
+            LOG.warning(('delete_user: UserNotFound for %s'),
+                        username)
+            pass
         notifications.Audit.deleted(self._USER, user_id, initiator)
 
         # Invalidate user role assignments cache region, as it may be caching
@@ -1383,6 +1428,14 @@ class Manager(manager.Manager):
         notifications.Audit.updated(self._USER, user_id, initiator)
         self.emit_invalidate_user_token_persistence(user_id)
 
+        user = self.get_user(user_id)
+        # Update Keyring password for the 'user' if it
+        # has an entry in Keyring
+        if (original_password) and ('name' in user):
+            # Change the 'user' password in keyring, provided the user
+            # has an entry in Keyring backend
+            self._update_keyring_password(user, new_password)
+
     @MEMOIZE
     def _shadow_nonlocal_user(self, user):
         try:
diff --git a/keystone/tests/unit/test_cli.py b/keystone/tests/unit/test_cli.py
index 08f16c8..8a908fa 100644
--- a/keystone/tests/unit/test_cli.py
+++ b/keystone/tests/unit/test_cli.py
@@ -70,6 +70,8 @@ class CliNoConfigTestCase(unit.BaseTestCase):
         self.config_fixture.register_cli_opt(cli.command_opt)
         self.useFixture(fixtures.MockPatch(
             'oslo_config.cfg.find_config_files', return_value=[]))
+        self.useFixture(fixtures.MockPatch(
+            'keyring.set_password', return_value=''))
         super(CliNoConfigTestCase, self).setUp()
 
         # NOTE(crinkle): the command call doesn't have to actually work,
@@ -110,7 +112,10 @@ class CliBootStrapTestCase(unit.SQLDriverOverrides, unit.TestCase):
         self._do_test_bootstrap(bootstrap)
 
     def _do_test_bootstrap(self, bootstrap):
-        bootstrap.do_bootstrap()
+        try:
+            bootstrap.do_bootstrap()
+        except exception.WRSForbiddenAction:
+            pass
         project = bootstrap.resource_manager.get_project_by_name(
             bootstrap.project_name,
             'default')
@@ -232,11 +237,13 @@ class CliBootStrapTestCase(unit.SQLDriverOverrides, unit.TestCase):
         user_id = bootstrap.identity_manager.get_user_by_name(
             bootstrap.username,
             'default')['id']
-        bootstrap.identity_manager.update_user(
-            user_id,
-            {'enabled': False,
-             'password': uuid.uuid4().hex})
-
+        try:
+            bootstrap.identity_manager.update_user(
+                user_id,
+                {'enabled': False,
+                 'password': uuid.uuid4().hex})
+        except exception.WRSForbiddenAction:
+            pass
         # The second bootstrap run will recover the account.
         self._do_test_bootstrap(bootstrap)
 
diff --git a/requirements.txt b/requirements.txt
index 7fb3993..f353820 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -41,3 +41,4 @@ pycadf!=2.0.0,>=1.1.0 # Apache-2.0
 msgpack-python>=0.4.0 # Apache-2.0
 osprofiler>=1.4.0 # Apache-2.0
 pytz>=2013.6 # MIT
+keyring>=5.3
-- 
2.7.4

